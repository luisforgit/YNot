//Com mensagem de credenciais inválidas


import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';
import { Button, TextInput, Title, Snackbar } from 'react-native-paper';
import { auth } from '../firebaseConfig';

export default function AuthScreen() {
  const [email, setEmail] = useState('');
  const [pass, setPass] = useState('');
  const [newPass, setNewPass] = useState('');
  const [mode, setMode] = useState('login'); // login | register | change
  const [error, setError] = useState('');

  const showInvalid = () => setError('Credenciais Inválidas');

  const handleLogin = async () => {
    try {
      await auth.signInWithEmailAndPassword(email, pass);
    } catch (e) {
      showInvalid();
    }
  };

  const handleRegister = async () => {
    try {
      await auth.createUserWithEmailAndPassword(email, pass);
    } catch (e) {
      showInvalid();
    }
  };

  const handleChange = async () => {
    try {
      await auth.currentUser.updatePassword(newPass);
      setMode('login'); // volta ao login após sucesso
    } catch (e) {
      showInvalid();
    }
  };

  return (
    <View style={styles.container}>
      <Title>yNote</Title>

      <TextInput
        label="Email"
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        style={styles.input}
      />
      {(mode === 'login' || mode === 'register') && (
        <TextInput
          label="Password"
          value={pass}
          onChangeText={setPass}
          secureTextEntry
          style={styles.input}
        />
      )}
      {mode === 'change' && (
        <TextInput
          label="New password"
          value={newPass}
          onChangeText={setNewPass}
          secureTextEntry
          style={styles.input}
        />
      )}

      {mode === 'login' && (
        <>
          <Button mode="contained" onPress={handleLogin}>
            Login
          </Button>
          <Button onPress={() => setMode('register')}>
            No account? Register
          </Button>
          <Button onPress={() => setMode('change')}>
            Change password
          </Button>
        </>
      )}

      {mode === 'register' && (
        <>
          <Button mode="contained" onPress={handleRegister}>
            Create account
          </Button>
          <Button onPress={() => setMode('login')}>
            Back to login
          </Button>
        </>
      )}

      {mode === 'change' && (
        <>
          <Button mode="contained" onPress={handleChange}>
            Update password
          </Button>
          <Button onPress={() => setMode('login')}>
            Back
          </Button>
        </>
      )}

      <Snackbar
        visible={!!error}
        onDismiss={() => setError('')}
        duration={3000}>
        {error}
      </Snackbar>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 16 },
  input: { marginBottom: 12 },
});